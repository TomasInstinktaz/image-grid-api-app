{"version":3,"sources":["assets/loader.gif","logo.svg","components/Loader/index.js","components/ImagesList/index.js","components/QueryDataList/index.js","containers/SearchForm/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loader","props","react_default","a","createElement","className","alt","src","loaderSrc","ImagesListItem","_ref","image","alt_description","urls","regular","ImagesList","list","map","ImagesList_ImagesListItem","key","id","QueryDataListItem","queryData","QueryDataList","index","QueryDataList_QueryDataListItem","SearchForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","query","images","query_data","isFetching","trackQueryValueChange","bind","assertThisInitialized","searchClick","saveClick","_this2","setState","fetch","concat","then","response","json","jsonResponse","console","log","results","event","preventDefault","fetchFunc","newArr","push","target","value","_this$state","type","placeholder","onChange","onClick","length","trim","src_components_Loader","src_components_ImagesList","src_components_QueryDataList","Component","App","logo","containers_SearchForm","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a864ef8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.951c2859.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport loaderSrc from '../../assets/loader.gif';\r\nimport './index.css';\r\n\r\nconst Loader = props => (\r\n    <div className=\"text-center\">\r\n        <img\r\n            className=\"loader-icon\"\r\n            alt=\"Loader icon\"\r\n            src={loaderSrc} />\r\n    </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\n// urls is \"full, raw, regular, small, thumb\"\r\nconst ImagesListItem = ({ image }) => (\r\n    <div className=\"col-sm-4\">\r\n        <img className=\"img-responsive\" alt={image.alt_description} src={image.urls.regular} />\r\n    </div>\r\n)\r\n\r\nconst ImagesList = (props) => {\r\n   return (\r\n        <div className=\"row\">\r\n           {props.list.map(image => (\r\n               <ImagesListItem image={image} key={image.id}/>\r\n           ))}\r\n         </div>\r\n   )\r\n}\r\n\r\nexport default ImagesList;\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\n// urls is \"full, raw, regular, small, thumb\"\r\nconst QueryDataListItem = ({ queryData }) => (\r\n    <li className=\"text-center\">{queryData}</li>\r\n)\r\n\r\nconst QueryDataList = (props) => {\r\n   return (\r\n        <ul>\r\n           {props.list.map((queryData, index) => (\r\n               <QueryDataListItem queryData={queryData} key={index}/>\r\n           ))}\r\n         </ul>\r\n   )\r\n}\r\n\r\nexport default QueryDataList;\r\n","import React, { Component } from 'react';\r\nimport Loader from '../../components/Loader';\r\nimport ImagesList from '../../components/ImagesList';\r\nimport QueryDataList from '../../components/QueryDataList';\r\n\r\nconst clientId = '91a8803cad63e68b7905d1f5537952f6909ba40b106d21af0160d01b247b4883';\r\nconst endpoint = 'https://api.unsplash.com/search/photos';\r\n\r\nclass SearchForm extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        query: '',\r\n        images: [],\r\n        query_data: [],\r\n        isFetching: false\r\n       };\r\n\r\n      this.trackQueryValueChange = this.trackQueryValueChange.bind(this);\r\n      this.searchClick = this.searchClick.bind(this);\r\n      this.saveClick = this.saveClick.bind(this);\r\n    }\r\n\r\n    fetchFunc() {\r\n      this.setState({ isFetching: true });\r\n\r\n      fetch(`${endpoint}?query=${this.state.query}&client_id=${clientId}`).then(response => {\r\n        return response.json()\r\n      }).then(jsonResponse => {\r\n        console.log(jsonResponse);\r\n        this.setState({\r\n          images: jsonResponse.results,\r\n          isFetching: false\r\n        })\r\n      })\r\n    }\r\n\r\n    searchClick(event) {\r\n      event.preventDefault();\r\n      \r\n      this.fetchFunc();\r\n    }\r\n\r\n    saveClick() {\r\n      var newArr = this.state.query_data;\r\n      newArr.push(this.state.query);\r\n      this.setState({query_data: newArr})\r\n    }\r\n\r\n    trackQueryValueChange(event) {\r\n        this.setState({query: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        const {query, query_data, images, isFetching } = this.state;\r\n\r\n        return (\r\n                <div className=\"searchForm\">\r\n                  <div className=\"container\">\r\n                    <div className=\"block1\">\r\n                      <div className=\"row\">\r\n                          <div className=\"col-sm-8\">\r\n                            <input\r\n                                className=\"searchForm__searchInput\"\r\n                                type=\"text\"\r\n                                placeholder=\"Search Input\"\r\n                                value={query}\r\n                                onChange={this.trackQueryValueChange} />\r\n                          </div>\r\n                          <div className=\"col-sm-4\">\r\n                            <input\r\n                                className=\"searchForm__searchBtn\"\r\n                                type=\"submit\"\r\n                                value=\"Search\"\r\n                                onClick={this.searchClick} />\r\n                            <input\r\n                                className=\"searchForm__saveBtn\"\r\n                                type=\"submit\"\r\n                                value=\"Save\"\r\n                                onClick={this.saveClick} />\r\n                          </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"block1\">\r\n                      <div className=\"row\">\r\n                          <div className=\"col-sm-8\">\r\n                            <div className=\"searchForm__imageGrid\">\r\n                                {\r\n                                    !isFetching && images.length === 0 && query.trim() === ''\r\n                                    &&\r\n                                    <p className=\"text-center\">Please enter images name into the input</p>\r\n                                }\r\n                                {\r\n                                    !isFetching && images.length === 0 && query.trim() !== ''\r\n                                    &&\r\n                                    <p className=\"text-center\">Empty Image Grid</p>\r\n                                }\r\n                                {\r\n                                    isFetching && query.trim() !== '' && <Loader/>\r\n                                }\r\n                                {\r\n                                    !isFetching && <ImagesList list={images}/>\r\n                                }\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-sm-4\">\r\n                            <div className=\"searchForm__savedQueries\">\r\n                                <QueryDataList list={query_data} />\r\n                            </div>\r\n                          </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchForm;\r\n","import React, { Component } from 'react';\nimport SearchForm from '../../containers/SearchForm';\nimport logo from '../../logo.svg';\nimport 'bootstrap-grid-only-css/dist/css/bootstrap-grid.min.css';\nimport './App.scss';\nimport 'whatwg-fetch';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"container\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">Welcome to React</h1>\n          </div>\n        </header>\n        <div className=\"bootstrap-wrapper\">\n            <SearchForm/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}